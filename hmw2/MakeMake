#############################################################
# function name	: 	MakeMake								#
# description	: 	Automaitcally creates a makefile		#
# parameters	: 	$1 = compiler's name					#
#					$2 = program's name 					#
#					$3 = file extension to compile			#
# return value	: 	0 - successfully generated				#
#					1 - makefile exists already				#
#############################################################

if [ -f makefile ]; then
    rm makefile
    # return
fi

files=(*.c)

echo "# Makefile automatically generated by MakeMake for 044101 - HW3" > makefile
echo "CC = $1" >> makefile
echo "CFLAGS = -g -Wall" >> makefile
echo "CCLINK = \$(CC) \$(CFLAGS)" >> makefile
echo "LIBS = " >> makefile
echo OBJS = "${files[@]/%.c/.o}" >> makefile
echo "RM = rm -f" >> makefile
echo "# Create the executable" >> makefile
echo "$2: \$(OBJS)" >> makefile
echo -e "\t\$(CCLINK) -o $2 \$(OBJS) \$(LIBS)" >> makefile
echo "# Create object files" >> makefile
for f in "${files[@]}"; do
    printf "${f/%.c/.o}: $f" >> makefile
    if [ -f "${f/%.c/.h}" ]; then
        printf " ${f/%.c/.h}" >> makefile
    fi
    echo >> makefile
    echo -e "\t\$(CCLINK) -c $f" >> makefile
done
echo >> makefile
echo "# Cleaning old files before new make" >> makefile
echo "clean:" >> makefile
echo -e "\t\$(RM) $2 *.o *.bak *~ \"#\"* core" >> makefile